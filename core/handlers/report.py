from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from core.keyboards.main_menu import main_menu_kb
from db.crud import get_or_create_user, save_daily_report
from db.database import AsyncSessionLocal


router = Router()

class ReportState(StatesGroup):
    relapse = State()
    showers = State()
    worked_hours = State()
    mood = State()
    note = State()

@router.message(F.text.lower() == "üìä –æ—Ç—á—ë—Ç")
async def report_start(message: types.Message, state: FSMContext):
    await state.set_state(ReportState.relapse)
    await message.answer("–°—Ä—ã–≤ –±—ã–ª —Å–µ–≥–æ–¥–Ω—è? (–¥–∞/–Ω–µ—Ç)")

@router.message(ReportState.relapse)
async def report_relapse(message: types.Message, state: FSMContext):
    await state.update_data(relapse=message.text.lower() == "–¥–∞")
    await state.set_state(ReportState.showers)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø—Ä–∏–Ω—è–ª –¥—É—à? (0/1/2)")

@router.message(ReportState.showers)
async def report_showers(message: types.Message, state: FSMContext):
    await state.update_data(showers=int(message.text))
    await state.set_state(ReportState.worked_hours)
    await message.answer("–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–ª/—É—á–∏–ª—Å—è —Å–µ–≥–æ–¥–Ω—è?")

@router.message(ReportState.worked_hours)
async def report_hours(message: types.Message, state: FSMContext):
    await state.update_data(worked_hours=float(message.text))
    await state.set_state(ReportState.mood)
    await message.answer("–û—Ü–µ–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 10")

@router.message(ReportState.mood)
async def report_mood(message: types.Message, state: FSMContext):
    await state.update_data(mood=int(message.text))
    await state.set_state(ReportState.note)
    await message.answer("–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É? (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)")

@router.message(ReportState.note)
async def report_note(message: types.Message, state: FSMContext):
    await state.update_data(note=message.text)
    data = await state.get_data()

    async with AsyncSessionLocal() as session:
        await get_or_create_user(session, message.from_user.id, message.from_user.username)
        await save_daily_report(
            session,
            user_id=message.from_user.id,
            relapse=data["relapse"],
            showers=data["showers"],
            worked_hours=data["worked_hours"],
            mood=data["mood"],
            note=data["note"]
        )

    await state.clear()
    await message.answer("–û—Ç—á—ë—Ç –ø—Ä–∏–Ω—è—Ç. –ü—Ä–æ—Ç–æ–∫–æ–ª —Å–æ–±–ª—é–¥—ë–Ω.", reply_markup=main_menu_kb())
